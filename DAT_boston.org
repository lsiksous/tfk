ðŸ’ˆIntroduction Ã  Tensorflow / Keras.
#+PROPERTY: header-args:jupyter-python :session *Py* :results raw drawer :cache no :async yes :exports results :eval yes

#+SUBTITLE: PrÃ©paration des donnÃ©es
#+AUTHOR: Laurent Siksous
#+EMAIL: siksous@gmail.com
# #+DATE: 
#+DESCRIPTION: 
#+KEYWORDS: 
#+LANGUAGE:  fr

# specifying the beamer startup gives access to a number of
# keybindings which make configuring individual slides and components
# of slides easier.  See, for instance, C-c C-b on a frame headline.
#+STARTUP: beamer

#+STARTUP: oddeven

# we tell the exporter to use a specific LaTeX document class, as
# defined in org-latex-classes.  By default, this does not include a
# beamer entry so this needs to be defined in your configuration (see
# the tutorial).
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger] 

#+LATEX_HEADER: \usepackage{listings}

#+LATEX_HEADER: \definecolor{UBCblue}{rgb}{0.04706, 0.13725, 0.26667} % UBC Blue (primary)
#+LATEX_HEADER: \usecolortheme[named=UBCblue]{structure}

# Beamer supports alternate themes.  Choose your favourite here
#+BEAMER_COLOR_THEME: dolphin
#+BEAMER_FONT_THEME:  default
#+BEAMER_INNER_THEME: [shadow]rounded
#+BEAMER_OUTER_THEME: infolines

# the beamer exporter expects to be told which level of headlines
# defines the frames.  We use the first level headlines for sections
# and the second (hence H:2) for frames.
#+OPTIONS: ^:nil  H:2 toc:t

# the following allow us to selectively choose headlines to export or not
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

# for a column view of options and configurations for the individual
# frames
#+COLUMNS: %20ITEM %13BEAMER_env(Env) %6BEAMER_envargs(Args) %4BEAMER_col(Col) %7BEAMER_extra(Extra)

# #+BEAMER_HEADER: \usebackgroundtemplate{\includegraphics[width=\paperwidth,height=\paperheight,opacity=.01]{img/bg2.jpeg}}
# #+BEAMER_HEADER: \logo{\includegraphics[height=.5cm,keepaspectratio]{img/bti_logo2.png}\vspace{240pt}}
# #+BEAMER_HEADER: \setbeamertemplate{background canvas}{\begin{tikzpicture}\node[opacity=.1]{\includegraphics [width=\paperwidth,height=\paperheight]{img/background.jpg}};\end{tikzpicture}}
# #+BEAMER_HEADER: \logo{\includegraphics[width=\paperwidth,height=\paperheight,keepaspectratio]{img/background.jpg}}
#+BEAMER_HEADER: \titlegraphic{\includegraphics[width=50]{img/logo.png}}
# #+BEAMER_HEADER: \definecolor{ft}{RGB}{255, 241, 229}
#+BEAMER_HEADER: \setbeamercolor{background canvas}{bg=ft}

* Preamble
** Emacs Setup                                                    :noexport:

#+begin_src emacs-lisp
(setq org-src-fontify-natively t)
#+end_src

#+RESULTS:
: t

** Imports

#+begin_src jupyter-python
%matplotlib inline
%load_ext autoreload
%autoreload 2

import warnings
warnings.filterwarnings("ignore")
import pickle

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

import tensorflow as tf
import kerastuner as kt

from keras.models import Sequential
from keras.layers import Dense, Normalization
from keras.datasets import boston_housing

print(f"TensorFlow Version: {tf.__version__}")
#+end_src

#+RESULTS:
:results:
# Out[37]:
:end:

** Functions

#+begin_src jupyter-python
# Display all
def display_all(df):
    with pd.option_context("display.max_rows", 100, "display.max_columns", 100): 
        display(df)
#+end_src

#+RESULTS:
:results:
# Out[38]:
:end:

** Org                                                            :noexport:

#+begin_src jupyter-python
# Org-mode table formatter
import IPython
import tabulate

class OrgFormatter(IPython.core.formatters.BaseFormatter):
    format_type = IPython.core.formatters.Unicode('text/org')
    print_method = IPython.core.formatters.ObjectName('_repr_org_')

def pd_dataframe_to_org(df):
    return tabulate.tabulate(df, headers='keys', tablefmt='orgtbl', showindex='always')

ip = get_ipython()
ip.display_formatter.formatters['text/org'] = OrgFormatter()

f = ip.display_formatter.formatters['text/org']
f.for_type_by_name('pandas.core.frame', 'DataFrame', pd_dataframe_to_org)
#+end_src

#+RESULTS:
:results:
# Out[39]:
:end:

** Seaborn

#+begin_src jupyter-python
sns.set(rc={'figure.figsize':(11.7,8.27)})
#+end_src

#+RESULTS:
:results:
# Out[40]:
:end:

* Data Wrangling
** Load Data

#+begin_src jupyter-python
(x_train, y_train), (x_test, y_test) = boston_housing.load_data(test_split=0.2, seed=0)
x_train.shape, x_test.shape
#+end_src

#+RESULTS:
:results:
# Out[41]:
: ((404, 13), (102, 13))
:end:

 Variables are in order:
 CRIM     per capita crime rate by town
 ZN       proportion of residential land zoned for lots over 25,000 sq.ft.
 INDUS    proportion of non-retail business acres per town
 CHAS     Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)
 NOX      nitric oxides concentration (parts per 10 million)
 RM       average number of rooms per dwelling
 AGE      proportion of owner-occupied units built prior to 1940
 DIS      weighted distances to five Boston employment centres
 RAD      index of accessibility to radial highways
 TAX      full-value property-tax rate per $10,000
 PTRATIO  pupil-teacher ratio by town
 B        1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town
 LSTAT    % lower status of the population
 MEDV     Median value of owner-occupied homes in $1000's


#+begin_src jupyter-python :exports both
feature_names = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX',
                 'RM', 'AGE', 'DIS', 'RAD', 'TAX',
                 'PTRATIO', 'B', 'LSTAT']

target = ['MEDV']
#+end_src

#+RESULTS:
:results:
# Out[42]:
:end:

** Glimpse at the data

#+begin_src jupyter-python
df = pd.DataFrame(x_train, columns=feature_names)
display_all(df.describe(include='all').T)
#+end_src

#+RESULTS:
:results:
# Out[43]:
|         |   count |        mean |        std |       min |         25% |       50% |       75% |      max |
|---------+---------+-------------+------------+-----------+-------------+-----------+-----------+----------|
| CRIM    |     404 |   3.67933   |   8.98726  |   0.00632 |   0.0829725 |   0.26888 |   3.48946 |  88.9762 |
| ZN      |     404 |  11.0953    |  22.7098   |   0       |   0         |   0       |  12.5     |  95      |
| INDUS   |     404 |  11.1126    |   6.70099  |   0.74    |   5.56      |   9.69    |  18.1     |  27.74   |
| CHAS    |     404 |   0.0693069 |   0.25429  |   0       |   0         |   0       |   0       |   1      |
| NOX     |     404 |   0.553192  |   0.115692 |   0.385   |   0.449     |   0.538   |   0.624   |   0.871  |
| RM      |     404 |   6.26967   |   0.691405 |   3.561   |   5.87775   |   6.189   |   6.6205  |   8.78   |
| AGE     |     404 |  68.3156    |  27.9037   |   2.9     |  45.075     |  76.5     |  94.15    | 100      |
| DIS     |     404 |   3.8276    |   2.16089  |   1.1296  |   2.0771    |   3.2721  |   5.2146  |  12.1265 |
| RAD     |     404 |   9.48515   |   8.62636  |   1       |   4         |   5       |  24       |  24      |
| TAX     |     404 | 406.29      | 164.011    | 187       | 284         | 334.5     | 666       | 711      |
| PTRATIO |     404 |  18.4327    |   2.14213  |  12.6     |  17.225     |  18.75    |  20.2     |  22      |
| B       |     404 | 356.194     |  91.3969   |   2.6     | 375.085     | 391.24    | 396.25    | 396.9    |
| LSTAT   |     404 |  12.6535    |   7.09299  |   1.73    |   7.1975    |  11.33    |  16.6725  |  37.97   |
:end:



#+begin_src jupyter-python
sns.distplot(y_train, bins=30)
plt.show()
#+end_src

#+RESULTS:
:results:
# Out[44]:
[[file:./obipy-resources/RIMOLi.png]]
:end:


#+begin_src jupyter-python
df['MEDV'] = y_train
correlation_matrix = df.corr().round(2)
sns.heatmap(data=correlation_matrix, annot=True)
plt.show()
#+end_src

#+RESULTS:
:results:
# Out[45]:
[[file:./obipy-resources/23cOao.png]]
:end:


* Baseline

** Feature Scaling

#+begin_src jupyter-python
scaler = MinMaxScaler()
X_train = scaler.fit_transform(x_train)
X_test = scaler.transform(x_test)
#+end_src

#+RESULTS:
:results:
# Out[46]:
:end:



#+begin_src jupyter-python
model = LinearRegression()
model.fit(X_train, y_train)
#+end_src

#+RESULTS:
:results:
# Out[47]:
: LinearRegression()
:end:


#+begin_src jupyter-python :results output
y_train_predict = model.predict(X_train)
rmse = (np.sqrt(mean_squared_error(y_train, y_train_predict)))
r2 = r2_score(y_train, y_train_predict)

print("The model performance for training set")
print("--------------------------------------")
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))
print("\n")

# model evaluation for testing set
y_test_predict = model.predict(X_test)
rmse = (np.sqrt(mean_squared_error(y_test, y_test_predict)))
r2 = r2_score(y_test, y_test_predict)

print("The model performance for testing set")
print("--------------------------------------")
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))
#+end_src

#+RESULTS:
:results:
The model performance for training set
--------------------------------------
RMSE is 4.854290583096463
R2 score is 0.7050376322888062


The model performance for testing set
--------------------------------------
RMSE is 4.060118093883478
R2 score is 0.8388807032132853
:end:

* Save the Data

#+begin_src jupyter-python
train = pd.DataFrame(np.c_[X_train, y_train], columns=df.columns)
test = pd.DataFrame(np.c_[X_test, y_test], columns=df.columns)
train.to_csv('data/train.csv', index=False)
test.to_csv('data/test.csv', index=False)
#+end_src

#+RESULTS:
:results:
# Out[49]:
:end:

* Bibliography
** References
:PROPERTIES:
:BEAMER_opt: shrink=10
:END:

bibliographystyle:unsrt
bibliography:perceptrons.bib

* Local Variables                                                  :noexport:
# Local Variables:
# eval: (setenv "PATH" "/Library/TeX/texbin/:$PATH" t)
# org-ref-default-bibliography: ("./olist.bib")
# End:
